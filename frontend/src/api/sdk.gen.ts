// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { PerritosListData, PerritosListResponses, PerritosRetrieveData, PerritosRetrieveResponses, PerritosTopRetrieveData, PerritosTopRetrieveResponses, SchemaRetrieveData, SchemaRetrieveResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Lista todos los perros, con filtros y paginaci√≥n
 */
export const perritosList = <ThrowOnError extends boolean = false>(options?: Options<PerritosListData, ThrowOnError>) => {
    return (options?.client ?? client).get<PerritosListResponses, unknown, ThrowOnError>({
        url: '/api/perritos/',
        ...options
    });
};

/**
 * Detalle de un perro por ID
 */
export const perritosRetrieve = <ThrowOnError extends boolean = false>(options: Options<PerritosRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<PerritosRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/perritos/{id}/',
        ...options
    });
};

/**
 * Lista solo los primeros 3 perros, los que acaban de ser agregados
 */
export const perritosTopRetrieve = <ThrowOnError extends boolean = false>(options?: Options<PerritosTopRetrieveData, ThrowOnError>) => {
    return (options?.client ?? client).get<PerritosTopRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/perritos/top/',
        ...options
    });
};

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const schemaRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SchemaRetrieveData, ThrowOnError>) => {
    return (options?.client ?? client).get<SchemaRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/schema/',
        ...options
    });
};
